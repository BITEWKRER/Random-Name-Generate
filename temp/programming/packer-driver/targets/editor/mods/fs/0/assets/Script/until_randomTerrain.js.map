{"version":3,"sources":["file:///C:/Users/Administrator/Desktop/Company_project/NewProject_8/assets/Script/until_randomTerrain.ts"],"names":["_decorator","Component","ccclass","property","UntilRandTerrain","createTerrain","arg0","test_terrain_info","Error","start","createTerrains","rooms","terrain_info","createOne","console","log","room","info","PI","raid","r","area","w","h","map","i","j","rpx","Math","random","rpy","domain","domain_o","x","y","length","floor","abs","ceil","cos","sin","id"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Mask, math } from \"cc\";\r\nimport { Util_CreateRandMap } from \"./Util_CreateRandMap\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"UntilRandTerrain\")\r\nexport class UntilRandTerrain extends Component {\r\n  createTerrain(arg0: any, test_terrain_info: any[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n  // [1]\r\n  // dummy = '';\r\n\r\n  // [2]\r\n  // @property\r\n  // serializableDummy = 0;\r\n\r\n  start() {}\r\n  static createTerrains(rooms: any[], terrain_info: any[]) {\r\n    return this.createOne(rooms[0], terrain_info);\r\n    console.log(rooms[0]);\r\n  }\r\n\r\n  static createOne(room: any, info: any[]) {\r\n    // poss\r\n    // let poss = 0.35;\r\n    let PI = 3.1415926;\r\n    let raid = 0;\r\n    let r = 0.5;\r\n\r\n    // area\r\n    let area = room.w * room.h;\r\n    console.log(\"area\", area);\r\n\r\n    //init\r\n    let map: any[] = [];\r\n    for (let i = 0; i < room.w; i++) {\r\n      map[i] = [];\r\n      for (let j = 0; j < room.h; j++) {\r\n        map[i][j] = -1;\r\n      }\r\n    }\r\n\r\n    // random point\r\n    let rpx = Math.random() * room.w;\r\n    let rpy = Math.random() * room.h;\r\n    console.log(rpx, rpy);\r\n    // domian\r\n    let domain, domain_o, x, y;\r\n\r\n    for (let i = 0; i < info.length; i++) {\r\n      domain = 0;\r\n      domain_o = Math.floor(info[i].area * area);\r\n\r\n      while (domain < domain_o) {\r\n        // x = Math.abs(Math.ceil(rpx + Math.cos(raid) * r));\r\n        // y = Math.abs(Math.ceil(rpy + Math.sin(raid) * r));\r\n        x = Math.abs(Math.ceil(rpx * Math.cos(raid) - rpy * Math.sin(raid)));\r\n        y = Math.abs(Math.ceil(rpx * Math.sin(raid) + rpy * Math.cos(raid)));\r\n\r\n        if (x < room.w && y < room.y && map[x][y] == -1) {\r\n          domain++;\r\n          map[x][y] = info[i].id;\r\n          raid += PI / 6;\r\n        } else {\r\n          rpx = Math.random() * room.w;\r\n          rpy = Math.random() * room.h;\r\n        }\r\n        if (raid >= 2 * PI) {\r\n          raid = 0;\r\n          r++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // output\r\n    console.log(map);\r\n    return map;\r\n  }\r\n}\r\n"]}
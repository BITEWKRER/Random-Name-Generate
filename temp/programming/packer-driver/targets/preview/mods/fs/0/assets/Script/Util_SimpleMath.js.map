{"version":3,"sources":["file:///C:/Users/Administrator/Desktop/Company_project/NewProject_8/assets/Script/Util_SimpleMath.ts"],"names":["Vec2","Util_SimpleMath","getAngleByTowPoint","x1","y1","x2","y2","v1","v2","angle","signAngle","subtract","normalize","Math","PI","getTriangleCircleCenter","x3","y3","t1","t2","t3","temp","x","y","getTriangleCircleRadius","a","sqrt","b","c","p","S","radius","_Krusal","poinset","edges","tree","poinset_parent","i","length","djs_find","djs_merge","j","push"],"mappings":"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","sourcesContent":["\r\nimport { Vec2 } from 'cc';\r\n\r\nexport class Util_SimpleMath {\r\n    static getAngleByTowPoint(x1: number, y1: number, x2: number, y2: number) {\r\n        const v1: Vec2 = new Vec2(x1, y1);\r\n        const v2: Vec2 = new Vec2(x2, y2);\r\n        let angle = new Vec2(1, 0).signAngle(v2.subtract(v1).normalize()) * 180 / Math.PI;\r\n\r\n        if (angle < 0) {\r\n            angle += 360;\r\n        }\r\n        return angle;\r\n    }\r\n    static getTriangleCircleCenter(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number) {\r\n        const t1: number = x1 * x1 + y1 * y1;\r\n        const t2: number = x2 * x2 + y2 * y2;\r\n        const t3: number = x3 * x3 + y3 * y3;\r\n        const temp: number = x1 * y2 + x2 * y3 + x3 * y1 - x1 * y3 - x2 * y1 - x3 * y2;\r\n        const x: number = (t2 * y3 + t1 * y2 + t3 * y1 - t2 * y1 - t3 * y2 - t1 * y3) / temp / 2;\r\n        const y: number = (t3 * x2 + t2 * x1 + t1 * x3 - t1 * x2 - t2 * x3 - t3 * x1) / temp / 2;\r\n\r\n        return { x: x, y: y };\r\n    }\r\n    static getTriangleCircleRadius(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number) {\r\n        const a: number = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\r\n        const b: number = Math.sqrt((x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3));\r\n        const c: number = Math.sqrt((x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3));\r\n        const p: number = (a + b + c) / 2;\r\n        const S: number = Math.sqrt(p * (p - a) * (p - b) * (p - c));\r\n        const radius = a * b * c / (4 * S);\r\n        return radius;\r\n    }\r\n    static getDistanceByTowPoint = function (x1: number, y1: number, x2: number, y2: number) {\r\n        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\r\n    }\r\n    static _Krusal(poinset: any[], edges: any[]) {\r\n        //生成并查集的数据结构\r\n        let tree: any[] = [];\r\n        let poinset_parent: number[] = [];\r\n        for (let i = 0; i < poinset.length; i++) {\r\n            poinset_parent[i] = i;\r\n        }\r\n        //并查集查询\r\n        let djs_find = function (i: number): any {\r\n            if (poinset_parent[i] == i)\r\n                return i;\r\n            else\r\n                return djs_find(poinset_parent[i]);\r\n        }\r\n        //并查集合并\r\n        let djs_merge = function (i: number, j: number) {\r\n            poinset_parent[djs_find(i)] = djs_find(j);\r\n        }\r\n        //回贴边到图中 直到tree的长度为n-1\r\n        for (let i = 0; i < edges.length; i++) {\r\n            \r\n            if (djs_find(edges[i].v1) != djs_find(edges[i].v2)) {\r\n                djs_merge(edges[i].v1, edges[i].v2);\r\n                tree.push(edges[i]);\r\n            }\r\n            if (tree.length == poinset_parent.length - 1)\r\n                break;\r\n        }\r\n        //返回最小生成树\r\n        return tree;\r\n    }\r\n}\r\n"]}